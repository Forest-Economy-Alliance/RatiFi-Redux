const CACHE_VERSION=`app-static-${new Date().toISOString()}`;self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_VERSION).then(e=>e.addAll(["/","/index.html","/offline.html"]))),self.skipWaiting()}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_VERSION)return console.log("Deleting old cache:",e),caches.delete(e)})))),self.clients.claim()}),self.addEventListener("fetch",e=>{e.request.url.startsWith("http")&&("navigate"===e.request.mode?e.respondWith(caches.match("/index.html").then(t=>t||fetch(e.request).then(t=>caches.open(CACHE_VERSION).then(a=>(a.put(e.request,t.clone()),t))).catch(()=>caches.match("/offline.html")))):e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>caches.open(CACHE_VERSION).then(a=>(a.put(e.request,t.clone()),t))).catch(e=>{console.error("Fetch failed:",e)}))))}),self.addEventListener("sync",e=>{"sync-claim-docs"===e.tag&&e.waitUntil(syncPendingClaims())});const syncPendingClaims=async()=>{console.log("Syncing pending claims...");try{let e=await openDB(),t=e.transaction("claim-images","readonly"),a=t.objectStore("claim-images"),n=await new Promise((e,t)=>{let n=a.getAll();n.onsuccess=()=>e(n.result),n.onerror=e=>t(e.target.error)});if(Array.isArray(n)&&n.length>0)for(let r of n)try{console.log("Uploading image:",r);let i={fileName:"DUMMY_NAME",base64Data:await blobToBase64(r.blob),userId:r?.userId,isPdf:!1},o=await fetch("https://4kmtkz4pcv.us-east-1.awsapprunner.com/get-gcp-url",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(o.ok){let s=await o.json(),l=s.response.Location;console.log("Image uploaded successfully:",l);let c=e.transaction("claim-images","readwrite");c.objectStore("claim-images").delete(r.id),console.log("Image removed from IndexedDB:",r.id)}else console.error("Failed to upload image:",o.statusText)}catch(d){console.error("Error uploading image:",d)}else console.log("No images to sync")}catch(m){console.error("Error syncing pending claims:",m)}};function blobToBase64(e){return new Promise((t,a)=>{let n=new FileReader;n.onloadend=()=>t(n.result.split(",")[1]),n.onerror=a,n.readAsDataURL(e)})}function openDB(){return new Promise((e,t)=>{let a=indexedDB.open("ClaimSyncDB",1);a.onupgradeneeded=e=>{let t=e.target.result;t.objectStoreNames.contains("claim-images")||t.createObjectStore("claim-images",{keyPath:"id",autoIncrement:!0})},a.onsuccess=()=>e(a.result),a.onerror=e=>t(e.target.error)})}